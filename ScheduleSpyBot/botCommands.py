import os
import telebot
import platform
import dataProcessor
import databaseManager
from logger import log
from botBase import bot
from botBase import adminIds
from enumerations import Group, Notifier, AdminPanel, notifierToGroup


def isUserBanned(message):
    return str(message.chat.id) in databaseManager.GetBlockedUsers()

@bot.message_handler(commands=['start'], func=lambda message: not isUserBanned(message))
def start(message):
    log(f"start call by {message.from_user.first_name}")
    bot.send_message(message.chat.id, 
                    "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç, —è–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –∑–º—ñ–Ω–∏ —É —Ç–≤–æ—î–º—É —Ä–æ–∑–∫–ª–∞–¥—ñ. üìÖ\n"
                    "–Ø–∫ —Ç—ñ–ª—å–∫–∏ –±—É–¥–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –≤—ñ–Ω –≤ –º–µ–∂–∞—Ö –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω –Ω–∞–¥—ñ—à–ª–µ —Ç–æ–±—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! üîî\n"
                    "–í—Å–µ —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ü–µ –ª–∏—à–µ –≤–∏–±—Ä–∞—Ç–∏ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É —è–∫–æ—ó –≥—Ä—É–ø–∏ —Ç–∏ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n"
                    "–í–≤–µ–¥–∏ /about, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –π–æ–≥–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ —è–∫ –≤—ñ–Ω –≤–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.", 
                    message_thread_id=message.message_thread_id)
    fullName = None
    if message.from_user.last_name is not None:
        fullName = f"{message.from_user.first_name} {message.from_user.last_name}"
    else:
        fullName = message.from_user.first_name

    databaseManager.SaveUser(message.from_user.id, fullName, message.from_user.username)

    if databaseManager.GetUserInfo(message.from_user.id)['group_name']=="":
        change_group(message)

@bot.message_handler(commands=['change_group'], func=lambda message: not isUserBanned(message))
def change_group(message):
    log(f"change group call by {message.from_user.first_name}")
    fullName = None
    if message.from_user.last_name is not None:
        fullName = f"{message.from_user.first_name} {message.from_user.last_name}"
    else:
        fullName = message.from_user.first_name

    databaseManager.SaveUser(message.from_user.id, fullName, message.from_user.username)

    keyboard = telebot.types.InlineKeyboardMarkup()
    button1 = telebot.types.InlineKeyboardButton("–ö–°241_1", callback_data=f"{Group.KC241_1.name}")
    button2 = telebot.types.InlineKeyboardButton("–ö–°241_2", callback_data=f"{Group.KC241_2.name}")
    button3 = telebot.types.InlineKeyboardButton("–ö–°242_1", callback_data=f"{Group.KC242_1.name}")
    button4 = telebot.types.InlineKeyboardButton("–ö–°242_2", callback_data=f"{Group.KC242_2.name}")
    button5 = telebot.types.InlineKeyboardButton("–ö–ù24_1",  callback_data=f"{Group.KN24_1.name}")
    button6 = telebot.types.InlineKeyboardButton("–ö–ù24_2",  callback_data=f"{Group.KN24_2.name}")
    button7 = telebot.types.InlineKeyboardButton("–ö–¢24",    callback_data=f"{Group.KT24.name}")
        
    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(button5, button6, button7)
    
    sent_message = bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –≥—Ä—É–ø—É –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º —è–∫–æ—ó —Ç–∏ —Ö–æ—á–µ—à —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏:", reply_markup=keyboard, message_thread_id=message.message_thread_id)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É: {call.data}")

    databaseManager.UpdateUserGroup(call.from_user.id, call.data)

@bot.message_handler(commands=['help'], func=lambda message: not isUserBanned(message))
def helpComm(message):
    log(f"help call by {message.from_user.first_name}")
    bot.send_message(message.chat.id, 
                     "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–º–∞–Ω–¥:\n"
                     "/start - –≤–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤–µ –≤—ñ—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.\n"
                     "/changeGroup - –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º —è–∫–æ—ó —Ç–∏ —Ö–æ—á–µ—à —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏.\n"
                     "/schedule - –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Ç–∏–∂–Ω—ñ (–ß–µ—Ä–µ–∑ —Å–ª–∞–±–∫—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≤—ñ–¥–∂–µ—Ç–∞ Google Spreadsheet –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –≤–∏–±—ñ—Ä –∞—Ä–∫—É—à—ñ–≤ –Ω–µ–∑—Ä—É—á–Ω–∏–π.).\n"
                     "/about - –≤–∏–≤–µ—Å—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞.\n"
                     "/help - –≤–∏–≤–µ—Å—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫.\n",                     
                     message_thread_id=message.message_thread_id)

@bot.message_handler(commands=['about'], func=lambda message: not isUserBanned(message))
def about(message):
    log(f"about call by {message.from_user.first_name}")
    bot.send_message(message.chat.id, 
                     "–¶–µ –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —É —Ä–æ–∑–∫–ª–∞–¥—ñ.\n"
                     "–û—Å—å —è–∫ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î:\n"
                     "- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥. ‚¨áÔ∏è\n"
                     "- –ü–æ—Ä—ñ–≤–Ω—é—î –π–æ–≥–æ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º, —â–æ –±—É–≤ –¥–µ–∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É. ‚ÜîÔ∏è\n"
                     "- –Ø–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –∑–º—ñ–Ω–∏ –≤ –≤–∏–±—Ä–∞–Ω—ñ–π —Ç–æ–±–æ—é –≥—Ä—É–ø—ñ, –Ω–∞–¥—Å–∏–ª–∞—î —Ç–æ–±—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. üîî\n"
                     "\n–¢–∞–∫–æ–∂ –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å —Ç–µ–±–µ –ø—Ä–∏ –ø–æ—è–≤—ñ –Ω–æ–≤–æ–≥–æ —Ç–∏–∂–Ω—è –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ. üìÖ\n"
                     "\n–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, —î —ñ–¥–µ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ —Ç–∏ –∑—ñ—Ç–∫–Ω—É–≤—Å—è –∑ [–±–∞–≥–æ–º](https://youtu.be/dQw4w9WgXcQ), –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∫–∞–∑–∞–Ω—ñ –≤ –æ–ø–∏—Å—É –±–æ—Ç–∞).", 
                     parse_mode="Markdown",
                     disable_web_page_preview=True,
                     message_thread_id=message.message_thread_id)

@bot.message_handler(commands=['schedule'], func=lambda message: not isUserBanned(message))
def schedule(message):
    log(f"schedule call by {message.from_user.first_name}")    
    markup = telebot.types.InlineKeyboardMarkup()
    
    if len(dataProcessor.weekNums) == 0:
        log("–ü–æ–º–∏–ª–∫–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ —Ç–∏–∂–Ω—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–Ω–∏—Ö.")
        bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return None

    currWeekNum = dataProcessor.weekNums[0]
    currWeekGid = dataProcessor.gids[int(currWeekNum)-1] or 1

    button1 = telebot.types.InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", web_app=telebot.types.WebAppInfo(url=
                                                    f"https://remenod.github.io/ScheduleSpyBot/?currWeekGid={currWeekGid}"))
    button = telebot.types.InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ (URL)", url=
                                                    f"https://docs.google.com/spreadsheets/u/0/d/{dataProcessor.SPREADSHEET_ID}"
                                                    f"/htmlview?output=html&rm=demo&pli=1&widget=true&gid={currWeekGid}#gid={currWeekGid}")

    markup.add(button1)
    markup.add(button)
    bot.send_message(message.chat.id, "–û—Å—å —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ", reply_markup=markup)


# Admin only

def isAdminOnly(message) -> bool:
    return (message.chat.id == AdminPanel.groupId.value) or (message.chat.id in adminIds)

@bot.message_handler(commands=['delete_week'], func=lambda message: isAdminOnly(message))
def delete_week(message):
    log(f"delete_week call by {message.from_user.first_name}")
    try:
        cParts = message.text.split()
        if len(cParts) == 2:
            databaseManager.DeleteSheet(cParts[1])
        else:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–∏–∂–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /delete_week 4", message_thread_id=message.message_thread_id)
            return           

    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∏–∂–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /delete_week 4", message_thread_id=message.message_thread_id)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î —Ç–∏–∂–Ω—è –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.", message_thread_id=message.message_thread_id)
    except Exception as e:
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", message.message_thread_id)

@bot.message_handler(commands=['print'], func=lambda message: isAdminOnly(message))
def send_sheet_data(message):
    log(f"print call by {message.from_user.first_name}")
    try:
        cParts = message.text.split()
        if len(cParts) != 2:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∞—Ä–∫—É—à–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /print 4", message_thread_id=message.message_thread_id)
            return

        bot.send_message(message.chat.id, "–ü–æ—á–µ–∫–∞–π—Ç–µ...", message_thread_id=message.message_thread_id)

        bot.send_message(message.chat.id, dataProcessor.GetSchedule(dataProcessor.LoadWorkbook().worksheets[int(cParts[1]) - 1], Group.KC241_1, False), message_thread_id=message.message_thread_id)      

    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞—Ä–∫—É—à–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /print 4", message_thread_id=message.message_thread_id)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∞—Ä–∫—É—à–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.", message_thread_id=message.message_thread_id)
    except Exception as e:
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", message.message_thread_id)

@bot.message_handler(commands=['compare'], func=lambda message: isAdminOnly(message))
def compare(message):    
    log(f"comparator call by {message.from_user.first_name}")
    try:
        cParts = message.text.split()
        if len(cParts) != 3:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–≤–∞ –Ω–æ–º–µ—Ä–∏ –∞—Ä–∫—É—à—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /compare 4 5", message_thread_id=message.message_thread_id)
            return

        bot.send_message(message.chat.id, "–ü–æ—á–µ–∫–∞–π—Ç–µ...", message_thread_id=message.message_thread_id)

        workbook = dataProcessor.LoadWorkbook()
        schedule1 = dataProcessor.GetSchedule(workbook.worksheets[int(cParts[1]) - 1], Group.KN24_1)
        schedule2 = dataProcessor.GetSchedule(workbook.worksheets[int(cParts[2]) - 1], Group.KN24_1)

        bot.send_message(message.chat.id, dataProcessor.CompareSchedules(schedule1, schedule2))

    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∏ –∞—Ä–∫—É—à—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /compare 4 5", message_thread_id=message.message_thread_id)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∞—Ä–∫—É—à–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.", message_thread_id=message.message_thread_id)
    except Exception as e:
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", message.message_thread_id)

@bot.message_handler(commands=['cool_compare'], func=lambda message: isAdminOnly(message))
def coolCompare(message):
    log(f"coolComparator call by {message.from_user.first_name}")
    try:
        cParts = message.text.split()
        if len(cParts) != 3:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–≤–∞ –Ω–æ–º–µ—Ä–∏ –∞—Ä–∫—É—à—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /coolCompare 4 5", message_thread_id=message.message_thread_id)
            return

        bot.send_message(message.chat.id, "–ü–æ—á–µ–∫–∞–π—Ç–µ...", message_thread_id=message.message_thread_id)

        workbook = dataProcessor.LoadWorkbook()
        schedule1 = dataProcessor.GetSchedule(workbook.worksheets[int(cParts[1]) - 1], Group.KC242_2)
        schedule2 = dataProcessor.GetSchedule(workbook.worksheets[int(cParts[2]) - 1], Group.KC242_2)

        bot.send_message(message.chat.id, dataProcessor.ParseComparerOutput(dataProcessor.CompareSchedules(schedule1, schedule2)), parse_mode='Markdown', message_thread_id=message.message_thread_id)

    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∏ –∞—Ä–∫—É—à—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /compare 4 5", message_thread_id=message.message_thread_id)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∞—Ä–∫—É—à–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.", message_thread_id=message.message_thread_id)
    except Exception as e:
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", message_thread_id=message.message_thread_id)

@bot.message_handler(commands=['fill_schedule_table'], func=lambda message: isAdminOnly(message))
def fill_group_handler(message):
    log(f"fill_schedule_table call by {message.from_user.first_name}")
    try:
        cParts = message.text.split()
        if len(cParts) != 2:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∞—Ä–∫—É—à–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /fill_schedule_table 4", message_thread_id=message.message_thread_id)
            return
        log("–ó–∞–ø–æ–≤–Ω—é—é –±–¥...", message.message_thread_id)
        sheet = dataProcessor.LoadWorkbook().worksheets[int(cParts[1])-1]
        sheetWeekNum = sheet.title.split("—Ç")[0]
        for group in Group:
            log(f"–ó–∞–ø–æ–≤–Ω—é—é –≥—Ä—É–ø—É {group.name}", message.message_thread_id)
            schedule = dataProcessor.GetSchedule(sheet, group)          
            databaseManager.WriteSchedule(sheetWeekNum, group, f"{schedule}")
        log("–ì–æ—Ç–æ–≤–æ", message.message_thread_id)

    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∏ –∞—Ä–∫—É—à—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /fill_schedule_table 4", message.message_thread_id)
    except IndexError:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∞—Ä–∫—É—à–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.", message.message_thread_id)
    except Exception as e:
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", message.message_thread_id)       

@bot.message_handler(commands=['call_checker'], func=lambda message: isAdminOnly(message))
def fill_group_handler(message):
        log("checker call")
        dataProcessor.CompareAllGroups()
        
@bot.message_handler(commands=['stop'], func=lambda message: isAdminOnly(message))
def stop(message):
    log(f"stop call by {message.from_user.first_name}")
    curent_system = platform.system()
    if curent_system == 'Windows':
        log("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        os.system('taskkill /F /PID %d' % os.getpid())
        log("But it refused.")
    elif curent_system == 'Linux':
        log("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        os._exit(0)
        log("But it refused.")
    else:
        try:
            log("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
            os._exit(0)
            os.system('taskkill /F /PID %d' % os.getpid())
        except Exception as e:
            log(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}")
        log("–°–ø—Ä–æ–±–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ –Ω–∞ –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ–≤–¥–∞—á–µ—é.")

@bot.message_handler(commands=['ban'], func=lambda message: isAdminOnly(message))
def ban(message):
    log(f"ban call by {message.from_user.first_name}")
    try:
        cParts = message.text.split()

        if len(cParts) != 2:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å id –∞–±–æ username. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /ban @Telegram –∞–±–æ /ban 1234567890", message_thread_id=message.message_thread_id)
            return     

        if cParts[1].startswith('@'):
            user = databaseManager.GetUserByUsername(cParts[1])            
            if user == {}:
                bot.send_message(message.chat.id, "–ù–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º username.", message_thread_id=message.message_thread_id)
                return None
            databaseManager.BlockUser(user['chat_id'])
            bot.send_message(message.chat.id,f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user['full_name']}({user['username']}) –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.", message_thread_id=message.message_thread_id)            

        elif cParts[1].isdigit():
            databaseManager.BlockUser(cParts[1])
            bot.send_message(message.chat.id,f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {cParts[1]} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.", message_thread_id=message.message_thread_id)            

    except Exception as e:
        bot.send_message(message.chat.id,f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {e}", message_thread_id=message.message_thread_id)     
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {e}")


@bot.message_handler(func=lambda message:
                    ((message.chat.id == AdminPanel.groupId.value and message.message_thread_id == AdminPanel.commandPlaceThreadId.value) or 
                    (message.chat.id in adminIds)) and
                    message.text.startswith('$'))
def execMsg(message):
    text=message.text.replace('$', '', 1)
    try:            
        exec(text)
    except Exception as e:            
        log(e)

@bot.message_handler(func=lambda message:
                     message.chat.id == AdminPanel.groupId.value and
                     message.message_thread_id in [item.value for item in Notifier],
                     content_types=['text', 'photo', 'video', 'audio', 'document', 'sticker', 'voice', 'location', 'contact', 'animation'])
def notify(message):
    if Notifier(message.message_thread_id) != Notifier.general:
        group = notifierToGroup.get(Notifier(message.message_thread_id))
        users = databaseManager.GetAllUsersByGroup(group)   
    else:            
        users = databaseManager.GetAllUserIds()

    if users:
        succes_users = []
        for user in users:
            try:                                                           
                if message.content_type == 'text':
                    bot.send_message(chat_id=user, text=message.text)                    
                elif message.content_type == 'sticker':
                    bot.send_sticker(chat_id=user, sticker=message.sticker.file_id)
                elif message.content_type == 'video':
                    bot.send_video(chat_id=user, video=message.video.file_id, caption=message.caption or "")
                elif message.content_type == 'audio':
                    bot.send_audio(chat_id=user, audio=message.audio.file_id, caption=message.caption or "")
                elif message.content_type == 'voice':
                    bot.send_voice(chat_id=user, voice=message.voice.file_id, caption=message.caption or "")
                elif message.content_type == 'photo':
                    bot.send_photo(chat_id=user, photo=message.photo[-1].file_id, caption=message.caption or "")
                elif message.content_type == 'document':
                    bot.send_document(chat_id=user, document=message.document.file_id, caption=message.caption or "")
                elif message.content_type == 'animation':
                    bot.send_animation(chat_id=user, animation=message.animation.file_id, caption=message.caption or "")
                else:
                    log(f"–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message.content_type} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
                succes_users.append(user)
            except Exception as e:
                log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        log(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–ª–∏:\n {succes_users} ({len(succes_users)}/{len(users)})")        
    else:
        log(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ì—Ä—É–ø–ø—É –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")